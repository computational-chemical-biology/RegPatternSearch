// Enable DSL2 syntax (recommended for modular, maintainable workflows)
nextflow.enable.dsl = 2

// Define the input directory where the .gbff files are located
params.base_dir = '/temporario2/9877294/extracted_gbff'

// Define the output directory where AntiSMASH results will be saved
params.output_base = '/temporario2/9877294/Resultados_AntiSMASH'


def run_main() {

    // Create a channel from all files ending with "_genomic.gbff" in the base directory
    arquivos_ch = Channel
        .fromPath("${params.base_dir}/*_genomic.gbff")

        // For each file, extract the genome name and create a tuple (name, file)
        .map { arquivo -> 
            tuple(arquivo.getBaseName().replace('_genomic.gbff', ''), arquivo)
        }

        // Limit the processing to the first 6 files (useful for testing)
        .take(6)

    // Execute the runAntismash process on the prepared input channel
    runAntismash(arquivos_ch)
}



process runAntismash {

    tag { genoma_name }  // Tag to label log and monitoring info with the genome name

    input:
    tuple val(genoma_name), path(arquivo)  // Input: a tuple containing the genome name and its corresponding file

    output:
    path "${genoma_name}_antismash", dir: true, emit: antismash_out  // Output: the directory generated by antiSMASH, emitted as a named channel

    publishDir "${params.output_base}", mode: 'copy'  // Copy the output directory to the specified base output directory

    script:
    """
    mkdir -p ${genoma_name}_antismash  // Create the output directory for this genome
    antismash --genefinding-tool prodigal "$arquivo" --output-dir ${genoma_name}_antismash  // Run antiSMASH with Prodigal on the input file
    """
}